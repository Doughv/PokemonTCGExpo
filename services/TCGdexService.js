// Importar polyfills primeiro
import '../polyfills';
import TCGdex from '@tcgdex/sdk';

// Polyfill robusto para APIs do navegador no React Native
if (typeof global !== 'undefined') {
  // Garantir que window existe
  if (typeof global.window === 'undefined') {
    global.window = {};
  }
  
  // Polyfill para calSage (erro espec√≠fico do SDK)
  if (typeof global.window.calSage === 'undefined') {
    global.window.calSage = undefined;
  }
  
  // Polyfill para sessionStorage
  if (typeof global.window.sessionStorage === 'undefined') {
    global.window.sessionStorage = {
      getItem: () => null,
      setItem: () => {},
      removeItem: () => {},
      clear: () => {},
      key: () => null,
      length: 0
    };
  }
  
  // Polyfill para localStorage se necess√°rio
  if (typeof global.window.localStorage === 'undefined') {
    global.window.localStorage = {
      getItem: () => null,
      setItem: () => {},
      removeItem: () => {},
      clear: () => {},
      key: () => null,
      length: 0
    };
  }
}

class TCGdexService {
  constructor(language = 'pt') {
    this.language = language;
    try {
      this.tcgdex = new tcgdex(language);
      console.log('‚úÖ SDK TCGdex inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar SDK TCGdex:', error);
      this.tcgdex = null;
    }
  }

  // Usar a propriedade image da carta ou construir URL manualmente
  getImageURL(card, quality = 'high', extension = 'png') {
    try {
      console.log('üîç Debug getImageURL:', {
        cardName: card.name,
        cardId: card.id,
        hasImage: !!card.image,
        imageValue: card.image
      });
      
      // Se a carta j√° tem uma propriedade image, usar ela
      if (card && card.image) {
        // Verificar se a URL j√° tem qualidade e extens√£o
        let imageUrl = card.image;
        if (!imageUrl.includes('/high.webp') && !imageUrl.includes('/medium.webp') && !imageUrl.includes('/low.webp')) {
          // Adicionar qualidade e extens√£o se n√£o tiver
          imageUrl = imageUrl.endsWith('/') ? imageUrl : imageUrl + '/';
          imageUrl += `${quality}.webp`;
        }
        console.log('‚úÖ Usando image da carta:', imageUrl);
        return imageUrl;
      }
      
      // Se tem m√©todo getImageURL do SDK, usar ele
      if (card && typeof card.getImageURL === 'function') {
        const url = card.getImageURL(quality, extension);
        console.log('‚úÖ URL do SDK:', url);
        return url;
      }
      
      // Fallback: construir URL manualmente
      const setId = card.set?.id || card.id?.split('-')[0] || 'sv01';
      const cardNumber = card.localId || card.number || '1';
      const manualUrl = `https://assets.tcgdex.net/pt/sv/${setId}/${cardNumber}/${quality}.webp`;
      console.log('üîß URL manual:', manualUrl);
      return manualUrl;
    } catch (error) {
      console.error('Erro ao obter URL da imagem:', error);
      // Fallback para URL manual
      const setId = card.set?.id || card.id?.split('-')[0] || 'sv01';
      const cardNumber = card.localId || card.number || '1';
      return `https://assets.tcgdex.net/pt/sv/${setId}/${cardNumber}/${quality}.webp`;
    }
  }

  // M√©todo para compatibilidade com o c√≥digo existente
  getImageUrl(card, quality = 'high', extension = 'png') {
    return this.getImageURL(card, quality, extension);
  }

  // Usar o m√©todo card.get() do SDK oficial
  async getCard(cardId) {
    try {
      console.log(`Buscando carta: ${cardId}`);
      const card = await this.tcgdex.card.get(cardId);
      console.log('Carta encontrada:', card.name);
      return card;
    } catch (error) {
      console.error('Erro ao buscar carta:', error);
      throw error;
    }
  }

  // Usar o m√©todo set.get() do SDK oficial
  async getSet(setId) {
    try {
      console.log(`Buscando cole√ß√£o: ${setId}`);
      const set = await this.tcgdex.set.get(setId);
      console.log('Cole√ß√£o encontrada:', set.name);
      return set;
    } catch (error) {
      console.error('Erro ao buscar cole√ß√£o:', error);
      throw error;
    }
  }

  // Buscar todas as s√©ries/cole√ß√µes
  async getSeries() {
    try {
      console.log('üîç Buscando s√©ries...');
      const response = await fetch('https://api.tcgdex.net/v2/pt/series');
      const series = await response.json();
      
      console.log('‚úÖ S√©ries encontradas:', series.length);
      return series;
    } catch (error) {
      console.error('‚ùå Erro ao buscar s√©ries:', error);
      throw error;
    }
  }

  // Buscar todas as expans√µes/sets
  async getSets() {
    try {
      console.log('üîç Buscando expans√µes...');
      const response = await fetch('https://api.tcgdex.net/v2/pt/sets');
      const sets = await response.json();
      
      // Filtrar apenas expans√µes com cartas em portugu√™s
      const filteredSets = sets.filter(set => 
        set.cardCount && set.cardCount.total > 0
      );
      
      // Ordenar por data de lan√ßamento (mais recentes primeiro)
      filteredSets.sort((a, b) => new Date(b.releaseDate || 0) - new Date(a.releaseDate || 0));
      
      console.log('‚úÖ Expans√µes encontradas:', filteredSets.length);
      return filteredSets;
    } catch (error) {
      console.error('‚ùå Erro ao buscar expans√µes:', error);
      throw error;
    }
  }

  // Buscar expans√µes de uma s√©rie espec√≠fica
  async getSetsBySeries(seriesId) {
    try {
      console.log('üîç Buscando expans√µes da s√©rie:', seriesId);
      const allSets = await this.getSets();
      
      // Filtrar expans√µes que pertencem √† s√©rie
      const seriesSets = allSets.filter(set => {
        // Verificar se o ID da expans√£o come√ßa com o ID da s√©rie
        return set.id.startsWith(seriesId);
      });
      
      console.log(`‚úÖ Expans√µes da s√©rie ${seriesId}:`, seriesSets.length);
      return seriesSets;
    } catch (error) {
      console.error('‚ùå Erro ao buscar expans√µes da s√©rie:', error);
      throw error;
    }
  }

  // Buscar cartas de uma cole√ß√£o espec√≠fica usando a API correta
  async getCardsBySet(setId) {
    try {
      console.log('Buscando cartas da cole√ß√£o:', setId);
      
      // Buscar todas as cartas e filtrar por cole√ß√£o
      const response = await fetch('https://api.tcgdex.net/v2/pt/cards');
      const allCards = await response.json();
      
      console.log('Total de cartas encontradas:', allCards.length);
      
      // Filtrar apenas cartas da cole√ß√£o espec√≠fica
      const filteredCards = allCards.filter(card => {
        const cardId = card.id || '';
        return cardId.startsWith(setId + '-');
      });
      
      console.log(`Cartas da cole√ß√£o ${setId}:`, filteredCards.length);
      
      // Buscar dados completos de cada carta
      const cardsWithDetails = await Promise.all(
        filteredCards.slice(0, 50).map(async (card) => {
          try {
            const cardResponse = await fetch(`https://api.tcgdex.net/v2/pt/cards/${card.id}`);
            const cardDetails = await cardResponse.json();
            return cardDetails;
          } catch (error) {
            console.error(`Erro ao buscar detalhes da carta ${card.id}:`, error);
            return card; // Retornar dados b√°sicos se falhar
          }
        })
      );
      
      console.log('Cartas com detalhes completos:', cardsWithDetails.length);
      return cardsWithDetails;
      
    } catch (error) {
      console.error('Erro ao buscar cartas da cole√ß√£o:', error);
      console.error('Detalhes do erro:', error.message);
      throw error;
    }
  }

  // Obter URL da imagem da carta em portugu√™s
  getCardImageUrl(cardId, setId, imageType = 'high') {
    return `https://assets.tcgdex.net/pt/${setId}/${cardId}/${imageType}.webp`;
  }

  // Obter URL da imagem da carta em alta resolu√ß√£o
  getCardImageUrlHigh(cardId, setId) {
    return this.getCardImageUrl(cardId, setId, 'high');
  }

  // Obter URL da imagem da carta em baixa resolu√ß√£o
  getCardImageUrlLow(cardId, setId) {
    return this.getCardImageUrl(cardId, setId, 'low');
  }
}

// Criar inst√¢ncia √∫nica do servi√ßo
const tcgdexService = new TCGdexService('pt');

export default tcgdexService;